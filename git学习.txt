1.安装配置git
	1.1已经安装需要0和1
		(0)卸载已有的Git软件，并删除之前保存的用户凭证
			控制面板 -> 用户账户 -> 凭据管理器 -> 删除所有git相关的凭证
		(1)到Git官网下载git的安装文件
			官网：https://git-scm.com/
		(2)安装Git程序，一路Next即可
		(3)生成传输文件加密和解密需要的“私钥”和“公钥”
			在用户主目录下，看看有没有.ssh目录，(id_rsa是私钥，id_rsa.pub是公钥)			
				方法1.右键gitgui=》help=》generate key
				方法2.打开Git Bash，创建SSH Key
								$ ssh-keygen -t rsa -C "你的邮箱"  一路回车，使用默认值即可
		(4)告诉Git当前系统的Git用户名和邮箱
				$ git config --global user.name "你的名字"
				$ git config --global user.email "你的邮箱"=======
				注意:
						1.git config命令的--global参数表示你这台机器上所有的Git仓库都会使用这个配置
						2.上述两个命令的本质是在修改C:\Users\用户名\.gitconfig这个文件
2.创建和使用本地版本库
	1.选择一个合适的地方，创建一个空目录：
	2.通过git init命令把这个目录变成Git可以管理的仓库
		把文件添加到版本库
			第一步，用命令git add告诉Git，把文件添加到仓库：可反复多次使用，添加多个文件
				$ git add readme.txt
				$ git add .		#将目录下所有新增和修改存至缓存区，但不包括删除
				$ git add -u	#将目录下所有修改和删除存至缓存区，但不包括新增
				$ git add -A	#缓存所有改动
			第二步，用命令git commit告诉Git，把文件提交到仓库：
				$ git commit -m "wrote a readme file"  
				注意：不添加-m参数会进入VIM编辑器！强制输入说明原因！
3.时光机穿梭
		git status命令可以让我们时刻掌握仓库当前的状态，
				Changes not staged for commit
				说明已跟踪文件的内容发生了变化,但还没有放到暂存区
		git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式。
					如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
					git diff readme.txt 
4.在Git中，我们用git log命令显示从最近到最远的提交日志
		$ git log --pretty=oneline  
		在Git中，HEAD指向的版本就是当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，上100个版本HEAD~100
			$ git reset --hard HEAD^  回到上一个版本//HEAD^^ HEAD~100
			$ git reset --hard 3628164 回到指定id的版本
			$ cat readme.txt 查看readme.txt的内容
		Git提供了一个命令git reflog查看命令历史
5.工作区和暂存区
		工作区（Working Directory）-----目录
		版本库（Repository）
				工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
				1.stage（或者叫index）的暂存区
				2.Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
						git add把文件添加进去，实际上就是把文件修改添加到暂存区
						git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支
						因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
			用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
			git diff    #是工作区(work dict)和暂存区(stage)的比较
			git diff --cached    #是暂存区(stage)和分支(master)的比较
			Git跟踪并管理的是修改，而非文件
6.撤销修改
		1.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
				 1.是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
				 2.是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
			 总结：让这个文件回到最近一次git commit或git add时的状态。
		 git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
		2.命令git reset HEAD file可以把暂存区的修改撤销掉（unstage）
			 git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
7.删除文件
	Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
	现在你有两个选择，
		1.确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
		2.删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
		$ git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
8.远程仓库
	Git是分布式版本控制系统
	本地Git仓库和GitHub仓库之间的传输是通过SSH加密
	第1步：创建SSH Key。
			
		
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面
			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
9.添加远程库
	登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
	在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
	把一个已有的本地仓库与之关联
	$ git remote add origin git@github.com:********/learngit.git
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
	$ git push -u origin master
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			从现在起，只要本地作了提交，就可以通过命令：
			$ git push origin mast
10.从远程库克隆
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
11.分支管理
	创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作
	1.创建与合并分支（Git鼓励大量使用分支）
		1.我们创建dev分支，然后切换到dev分支：
			$ git checkout -b dev
						git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
								$ git branch dev
								$ git checkout dev
			git branch命令会列出所有分支，当前分支前面会标一个*号
		2.dev分支的工作完成，我们就可以切换回master分支：
			$ git checkout master
		3.把dev分支的工作成果合并到master分支上
			$ git merge dev
					git merge命令用于合并指定分支到当前分支
		4.删除分支
				$ git branch -d dev
	2.解决冲突
		文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件
		Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，手动修改后保存在add  commit
		用带参数的git log也可以看到分支的合并情况：
			$ git log --graph --pretty=oneline --abbrev-commit
	3.分支管理策略
		Git分支十分强大，在团队开发中应该充分应用。
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
		
		