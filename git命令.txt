Git 命令
	1.git init 这个目录变成Git可以管理的仓库
	2.git add
			1.$ git add readme.txt
			2.$ git add .		#将目录下所有新增和修改存至缓存区，但不包括删除
			3.$ git add -u	#将目录下所有修改和删除存至缓存区，但不包括新增
			4.$ git add -A	#缓存所有改动
	3.git commit -m "message" 把文件提交到版本库
		注意：不添加-m参数会进入VIM编辑器！强制输入说明原因！
	4.git status 仓库当前的状态
	5.git log命令显示从最近到最远的提交日志
		$ git log --pretty=oneline  
	6.git reset
		在Git中，HEAD指向的版本就是当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，上100个版本HEAD~100
			$ git reset --hard HEAD^  回到上一个版本//HEAD^^ HEAD~100
			$ git reset --hard 3628164 回到指定id的版本
		  $ git reset HEAD file可以把暂存区的修改撤销掉（unstage）
				git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。用HEAD，表示最新的版本。
			//$ cat readme.txt 查看readme.txt的内容
	7.git reflog查看命令历史
	8.git diff
			git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
			git diff    #是工作区(work )和暂存区(stage)的比较
			git diff --cached    #是暂存区(stage)和分支(master)的比较
	9.git checkout
		1.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
				 1.是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
				 2.是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
			 总结：让这个文件回到最近一次git commit或git add时的状态。
							git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
							git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除
		2.git checkout 版本号 文件名
			从历史仓库中检出指定的文件内容
		3.$ git checkout -b dev		加上-b参数表示创建并切换，相当于以下两条命令：
								$ git branch dev创建分支
								$ git checkout dev 切换到dev分支
		4.$ git merge dev
					git merge命令用于合并指定分支到当前分支
		5.$ git branch -d dev
				删除分支
		6.$ git log --graph --pretty=oneline --abbrev-commit
			用带参数的git log也可以看到分支的合并情况：
	10.$ git remote add origin git@github.com:********/learngit.git
		把一个已有的本地仓库与之关联
	11.$ git push -u origin master
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			从现在起，只要本地作了提交，就可以通过命令：
			$ git push origin mast
	12.git clone
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快